{"version":3,"sources":["utils.js","Auth/Auth.js","Download/Download.js","Upload/Upload.js","Main/Main.js","App.js","registerServiceWorker.js","index.js"],"names":["window","utils","parseQueryString","str","ret","Object","create","trim","replace","split","forEach","param","parts","key","shift","val","length","join","undefined","decodeURIComponent","Array","isArray","push","Auth","CLIENT_ID","state","isAuthenticated","token","authUrl","files","getAccessTokenFromUrl","location","hash","access_token","localStorage","getItem","this","setState","setItem","dbx","Dropbox","clientId","getAuthenticationUrl","react_default","a","createElement","id","href","className","class","React","Component","Download","type","path","accessToken","filesGetTemporaryLink","then","response","open","link","Upload","filesinput","filesUpload","contents","name","autorename","alert","catch","error","console","Main","starred","previousPath","findStarInfo","value","starredArray","_this","idExistsInFiles","idExistsInFilesIndex","idExistsInStarred","map","element","indexOf","item","checkIfItemIsStarred","answer","changeStar","removeStar","removeFromArray","splice","starredList","loadPath","x","self","assertThisInitialized","data","filesListFolder","temp","entries","result","obj","tempresult","path_display","path_lower","size","server_modified","client_modified","changePath","e","goBack","goToParent","newPathArray","printBreadCrumbs","thisPath","toString","adress","dataToPrint","names","upLoadAndChangePath","successfulUpload","timer","setInterval","clearInterval","signOut","removeItem","_this2","onClick","style","fontSize","scope","_this3","icon","star","paddingLeft","display","onChange","target","App","Auth_Auth","Main_Main","Download_Download","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c067a981.chunk.js","sourcesContent":["(function(window) {\r\n  window.utils = {\r\n    parseQueryString: function(str) {\r\n      var ret = Object.create(null);\r\n\r\n      if (typeof str !== \"string\") {\r\n        return ret;\r\n      }\r\n\r\n      str = str.trim().replace(/^(\\?|#|&)/, \"\");\r\n\r\n      if (!str) {\r\n        return ret;\r\n      }\r\n\r\n      str.split(\"&\").forEach(function(param) {\r\n        var parts = param.replace(/\\+/g, \" \").split(\"=\");\r\n        // Firefox (pre 40) decodes `%3D` to `=`\r\n        // https://github.com/sindresorhus/query-string/pull/37\r\n        var key = parts.shift();\r\n        var val = parts.length > 0 ? parts.join(\"=\") : undefined;\r\n\r\n        key = decodeURIComponent(key);\r\n\r\n        // missing `=` should be `null`:\r\n        // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\r\n        val = val === undefined ? null : decodeURIComponent(val);\r\n\r\n        if (ret[key] === undefined) {\r\n          ret[key] = val;\r\n        } else if (Array.isArray(ret[key])) {\r\n          ret[key].push(val);\r\n        } else {\r\n          ret[key] = [ret[key], val];\r\n        }\r\n      });\r\n\r\n      return ret;\r\n    }\r\n  };\r\n})(window);\r\n","import React from \"react\";\r\nimport \"../utils.js\";\r\nimport { Dropbox } from \"dropbox\";\r\n\r\nexport default class Auth extends React.Component {\r\n  CLIENT_ID = \"dwzodxx4tsontje\"; //app key\r\n\r\n  state = {\r\n    isAuthenticated: false,\r\n    token: \"\",\r\n    authUrl: \"\",\r\n    files: \"\"\r\n  };\r\n\r\n  //component ska ha Class!!!\r\n  componentWillMount() {\r\n    //Parses the url and gets the access token if it is in the urls hash\r\n    function getAccessTokenFromUrl() {\r\n      return window.utils.parseQueryString(window.location.hash).access_token;\r\n    }\r\n\r\n    //kollar om det finns token i localStorage och om det finns sätter Authenticated till true och sparar token\r\n    if (localStorage.getItem(\"access_token\")) {\r\n      this.setState({\r\n        isAuthenticated: true,\r\n        token: localStorage.getItem(\"access_token\")\r\n      });\r\n    }\r\n\r\n    //om inte token finns i localstorage ska den hämta token från URL och spara i localstorage\r\n    else if (getAccessTokenFromUrl()) {\r\n      let access_token = getAccessTokenFromUrl();\r\n      localStorage.setItem(\"access_token\", access_token);\r\n      this.setState({\r\n        token: access_token\r\n      });\r\n    }\r\n\r\n    //om man har ingen token i localstorage och url då anvisas man till dropbox inloggnings sidan.\r\n    else {\r\n      const dbx = new Dropbox({ clientId: this.CLIENT_ID });\r\n      this.setState({\r\n        authUrl: dbx.getAuthenticationUrl(\"https://pixbox.netlify.com/\")\r\n      });\r\n    }\r\n  }\r\n\r\n  //class ska alltid ha render när man använder return!\r\n  render() {\r\n    //if-sats som kontrollerar om token existerar om ja laddar inloggade sidan\r\n    if (this.state.token) {\r\n      return null;\r\n    }\r\n\r\n    //annars laddas login-knapped\r\n    if (!this.state.token) {\r\n      return (\r\n        <div id=\"login\">\r\n          <h1>WELCOME TO PIX-BOX</h1>\r\n          <a href={this.state.authUrl} id=\"authlink\" className=\"button\">\r\n            {\" \"}\r\n            <i class=\"fas fa-users\" /> Login\r\n          </a>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import \"./Download.css\";\r\nimport { Dropbox } from \"dropbox/src/index\";\r\n\r\nexport default function Download(type, path) {\r\n  var dbx = new Dropbox({ accessToken: localStorage.getItem(\"access_token\") });\r\n  dbx.filesGetTemporaryLink({ path: path }).then(function(response) {\r\n    window.open(response.link, \"_blank\");\r\n  });\r\n\r\n  return null;\r\n}\r\n","import { Dropbox } from \"dropbox/src/index\";\r\n\r\nexport default function Upload(files, path) {\r\n  let filesinput = files[0];\r\n  if (filesinput) {\r\n    var dbx = new Dropbox({\r\n      accessToken: localStorage.getItem(\"access_token\")\r\n    });\r\n    dbx\r\n      .filesUpload({\r\n        contents: filesinput,\r\n        path: path + \"/\" + filesinput.name,\r\n        autorename: true\r\n      })\r\n      .then(function(response) {\r\n        alert(\"Your File Has been uploaded! á la success\");\r\n        return null;\r\n      })\r\n      .catch(function(error) {\r\n        console.error(\"ooo nooooo,its a error! Try again!\");\r\n      });\r\n  }\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport \"../utils.js\";\r\nimport { Dropbox } from \"dropbox\";\r\nimport Download from \"../Download/Download\";\r\nimport Upload from \"../Upload/Upload\";\r\n\r\nexport default class Main extends React.Component {\r\n  //state som innehåller files,path,starred och previusPath\r\n  state = {\r\n    files: [],\r\n    path: \"\",\r\n    starred: [],\r\n    previousPath: []\r\n  };\r\n\r\n  //\r\n  componentWillMount() {\r\n    this.loadPath(this.state.path);\r\n  }\r\n\r\n  //för att hitta informationen om den filen som är favorit markerad och slänga den i state\r\n  findStarInfo = value => {\r\n    let starredArray = this.state.starred;\r\n    let idExistsInFiles = false;\r\n    let idExistsInFilesIndex = \"\";\r\n    let idExistsInStarred = false;\r\n\r\n    //går genom files i state och kollar om id stämmer, om ja sätter Idexist to true och spara indexet\r\n    this.state.files.map((element, indexOf) => {\r\n      if (element.id === value) {\r\n        idExistsInFiles = true;\r\n        idExistsInFilesIndex = indexOf;\r\n      }\r\n    });\r\n\r\n    starredArray.map(item => {\r\n      if (item.id === value) {\r\n        idExistsInStarred = true;\r\n      }\r\n    });\r\n\r\n    //om id finns inte i starred men finns i files då ska man pusha den till starredarray\r\n    if (idExistsInStarred === false && idExistsInFiles === true) {\r\n      starredArray.push(this.state.files[idExistsInFilesIndex]);\r\n      this.setState({\r\n        starred: starredArray\r\n      });\r\n    }\r\n  };\r\n\r\n  checkIfItemIsStarred = id => {\r\n    let starredArray = this.state.starred;\r\n    let answer = false;\r\n    starredArray.map(element => {\r\n      if (element.id === id) {\r\n        answer = true;\r\n      }\r\n    });\r\n    return answer;\r\n  };\r\n\r\n  changeStar = id => {\r\n    if (this.checkIfItemIsStarred(id)) {\r\n      this.removeStar(id);\r\n    } else {\r\n      this.findStarInfo(id);\r\n    }\r\n  };\r\n\r\n  //för att hitta vilken fil ska tas bort från favoriter\r\n  removeStar = value => {\r\n    let removeFromArray = this.state.starred;\r\n    removeFromArray.map((element, indexOf) => {\r\n      if (element.id === value) {\r\n        removeFromArray.splice(indexOf, 1);\r\n      }\r\n    });\r\n    this.setState({\r\n      starred: removeFromArray\r\n    });\r\n  };\r\n\r\n  starredList = () => {\r\n    this.setState({\r\n      path: \"\"\r\n    });\r\n    let starred = this.state.starred;\r\n    this.setState({\r\n      files: starred\r\n    });\r\n  };\r\n\r\n  loadPath = x => {\r\n    if (localStorage.getItem(\"access_token\")) {\r\n      const self = this;\r\n      let data = [];\r\n      var dbx = new Dropbox({\r\n        accessToken: localStorage.getItem(\"access_token\")\r\n      });\r\n      dbx.filesListFolder({ path: x }).then(function(response) {\r\n        let temp = [];\r\n        temp.push(response.entries);\r\n        let result = temp[0].map(function(obj) {\r\n          let tempresult = [];\r\n          tempresult[\".tag\"] = obj[\".tag\"];\r\n          tempresult[\"id\"] = obj.id;\r\n          tempresult[\"name\"] = obj.name;\r\n          tempresult[\"path_display\"] = obj.path_display;\r\n          tempresult[\"path_lower\"] = obj.path_lower;\r\n          tempresult[\"size\"] = obj.size;\r\n          tempresult[\"server_modified\"] = obj.server_modified;\r\n          tempresult[\"client_modified\"] = obj.client_modified;\r\n          return tempresult;\r\n        });\r\n\r\n        data = result;\r\n        self.setState({\r\n          files: data\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  changePath = e => {\r\n    this.setState({\r\n      previousPath: this.state.path,\r\n      path: e\r\n    });\r\n    this.loadPath(e);\r\n  };\r\n\r\n  goBack = () => {\r\n    this.setState({\r\n      path: this.state.previousPath\r\n    });\r\n    this.loadPath(this.state.previousPath);\r\n  };\r\n\r\n  goToParent = () => {\r\n    let newPathArray = this.state.path.split(\"/\");\r\n    newPathArray.splice(0, 1);\r\n    newPathArray.splice(-1, 1);\r\n    newPathArray = \"/\" + newPathArray.join(\"/\");\r\n    this.changePath(newPathArray);\r\n  };\r\n\r\n  //printar breadcrumps\r\n  printBreadCrumbs = path => {\r\n    let thisPath = path.toString();\r\n    let adress = \"\";\r\n    let dataToPrint = [];\r\n\r\n    if (thisPath !== \"\") {\r\n      let newPathArray = thisPath.split(\"/\");\r\n      newPathArray.splice(0, 1);\r\n\r\n      newPathArray.map(name => {\r\n        let names = name;\r\n        adress = adress + \"/\" + names;\r\n        dataToPrint.push([adress, names]);\r\n      });\r\n    }\r\n    return dataToPrint;\r\n  };\r\n\r\n  upLoadAndChangePath = (files, path) => {\r\n    let successfulUpload = Upload(files, path);\r\n\r\n    let checkIfDone = () => {\r\n      if (successfulUpload === null) {\r\n        this.changePath(path);\r\n        clearInterval(timer);\r\n      }\r\n    };\r\n    let timer = setInterval(checkIfDone, 1000);\r\n  };\r\n\r\n  signOut = () => {\r\n    localStorage.removeItem(\"access_token\");\r\n    if (!localStorage.getItem(\"access_token\")) {\r\n      this.setState({\r\n        files: [],\r\n        path: \"\",\r\n        starred: [],\r\n        previousPath: []\r\n      });\r\n      window.location.href = \"https://pixbox.netlify.com/\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (localStorage.getItem(\"access_token\")) {\r\n      return (\r\n        <div>\r\n          <h1 className=\"firstm\">Welcome to your PIX-BOX</h1>\r\n          <button onClick={this.signOut} className=\"button-signout\">\r\n            Sign Out\r\n          </button>\r\n          <div className=\"navigation\">\r\n            <p onClick={() => this.changePath(\"\")} className=\"iconWrap\">\r\n              <i className=\"fas fa-home  text-white\" />\r\n            </p>\r\n            <p onClick={() => this.starredList()} className=\"iconWrap\">\r\n              <i className=\"fas fa-star text-warning\" />\r\n              Starred\r\n            </p>\r\n            <p onClick={() => this.goBack()} className=\"iconWrap\">\r\n              <i className=\"fas fa-arrow-circle-left  text-white\" />\r\n              Go back\r\n            </p>\r\n            <hr />\r\n            {this.printBreadCrumbs(this.state.path).map(obj => {\r\n              return (\r\n                <line>\r\n                  <breadcrumb onClick={() => this.changePath(obj[0])}>\r\n                    {obj[1]}\r\n                  </breadcrumb>\r\n                  /\r\n                </line>\r\n              );\r\n            })}\r\n          </div>\r\n          <table className=\"table\">\r\n            <thead className=\"thead-dark\" style={{ fontSize: \"20px\" }}>\r\n              <tr>\r\n                <th scope=\"col\">Filename</th>\r\n                <th scope=\"col\">Size</th>\r\n                <th scope=\"col\">Timestamp</th>\r\n                <th scope=\"col\">Last modified</th>\r\n                <th scope=\"col\" />\r\n              </tr>\r\n            </thead>\r\n\r\n            <tbody>\r\n              {this.state.files.map(function(obj) {\r\n                let icon = \"\";\r\n                let star = \"\";\r\n                if (obj[\".tag\"] === \"folder\") {\r\n                  icon = \"fas fa-folder\";\r\n                  if (this.checkIfItemIsStarred(obj.id)) {\r\n                    star = \"fas fa-star\";\r\n                  } else {\r\n                    star = \"far fa-star\";\r\n                  }\r\n                  return (\r\n                    <tr key={obj.id}>\r\n                      <td\r\n                        onClick={() => this.changePath(obj.path_lower)}\r\n                        className={icon}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            paddingLeft: \"1em\",\r\n                            display: \"inline-block\"\r\n                          }}\r\n                        >\r\n                          {obj.name}\r\n                        </p>\r\n                      </td>\r\n                      <td>{obj.size}</td>\r\n                      <td>{obj.client_modified}</td>\r\n                      <td>{obj.server_modified}</td>\r\n                      <td\r\n                        className={star}\r\n                        onClick={() => this.changeStar(obj.id)}\r\n                      />\r\n                    </tr>\r\n                  );\r\n                } else if (obj[\".tag\"] === \"file\") {\r\n                  icon = \"fas fa-file\";\r\n                  if (this.checkIfItemIsStarred(obj.id)) {\r\n                    star = \"fas fa-star\";\r\n                  } else {\r\n                    star = \"far fa-star\";\r\n                  }\r\n                  return (\r\n                    <tr key={obj.id}>\r\n                      <td\r\n                        onClick={() => {\r\n                          Download(obj[\".tag\"], obj.path_lower);\r\n                        }}\r\n                        className={icon}\r\n                      >\r\n                        <p\r\n                          style={{\r\n                            paddingLeft: \"1em\",\r\n                            display: \"inline-block\"\r\n                          }}\r\n                        />\r\n                        {obj.name}\r\n                        />\r\n                      </td>\r\n                      <td>{obj.size}</td>\r\n                      <td>{obj.client_modified}</td>\r\n                      <td>{obj.server_modified}</td>\r\n                      <td\r\n                        className={star}\r\n                        onClick={() => this.changeStar(obj.id)}\r\n                      />\r\n                    </tr>\r\n                  );\r\n                }\r\n              }, this)}\r\n            </tbody>\r\n          </table>\r\n          <form>\r\n            <input\r\n              type=\"file\"\r\n              id=\"upload\"\r\n              onChange={e =>\r\n                this.upLoadAndChangePath(e.target.files, this.state.path)\r\n              }\r\n            />\r\n          </form>\r\n        </div>\r\n      );\r\n    } else return null;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './utils.js';\r\nimport Auth from './Auth/Auth';\r\nimport './App.css';\r\nimport Main from './Main/Main';\r\nimport Download from './Download/Download';\r\nimport Upload from './Upload/Upload';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n\r\n                return (\r\n\r\n                    <div className=\"App\">\r\n                        <Auth/>\r\n                         <Main/>\r\n                         <Download/>\r\n                          <Upload/>\r\n                </div>)\r\n            }\r\n\r\n\r\n}\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}